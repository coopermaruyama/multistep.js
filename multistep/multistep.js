// Generated by CoffeeScript 1.3.3
(function() {
  var $;

  (function($) {
    var Tipsy, isElementInDOM, maybeCall;
    maybeCall = function(thing, ctx) {
      if (typeof thing === "function") {
        return thing.call(ctx);
      } else {
        return thing;
      }
    };
    isElementInDOM = function(ele) {
      if ((function() {
        var _results;
        _results = [];
        while (ele = ele.parentNode) {
          _results.push(ele === document);
        }
        return _results;
      })()) {
        return true;
      }
      return false;
    };
    Tipsy = function(element, options) {
      this.$element = $(element);
      this.options = options;
      this.enabled = true;
      return this.fixTitle();
    };
    Tipsy.prototype = {
      show: function() {
        var $tip, actualHeight, actualWidth, gravity, pos, title, tp;
        title = this.getTitle();
        if (title && this.enabled) {
          $tip = this.tip();
          $tip.find(".tipsy-inner")[(this.options.html ? "html" : "text")](title);
          $tip[0].className = "tipsy";
          $tip.remove().css({
            top: 0,
            left: 0,
            visibility: "hidden",
            display: "block"
          }).prependTo(document.body);
          pos = $.extend({}, this.$element.offset(), {
            width: this.$element[0].offsetWidth,
            height: this.$element[0].offsetHeight
          });
          actualWidth = $tip[0].offsetWidth;
          actualHeight = $tip[0].offsetHeight;
          gravity = maybeCall(this.options.gravity, this.$element[0]);
          tp = void 0;
          switch (gravity.charAt(0)) {
            case "n":
              tp = {
                top: pos.top + pos.height + this.options.offset,
                left: pos.left + pos.width / 2 - actualWidth / 2
              };
              break;
            case "s":
              tp = {
                top: pos.top - actualHeight - this.options.offset,
                left: pos.left + pos.width / 2 - actualWidth / 2
              };
              break;
            case "e":
              tp = {
                top: pos.top + pos.height / 2 - actualHeight / 2,
                left: pos.left - actualWidth - this.options.offset
              };
              break;
            case "w":
              tp = {
                top: pos.top + pos.height / 2 - actualHeight / 2,
                left: pos.left + pos.width + this.options.offset
              };
          }
          if (gravity.length === 2) {
            if (gravity.charAt(1) === "w") {
              tp.left = pos.left + pos.width / 2 - 15;
            } else {
              tp.left = pos.left + pos.width / 2 - actualWidth + 15;
            }
          }
          $tip.css(tp).addClass("tipsy-" + gravity);
          $tip.find(".tipsy-arrow")[0].className = "tipsy-arrow tipsy-arrow-" + gravity.charAt(0);
          if (this.options.className) {
            $tip.addClass(maybeCall(this.options.className, this.$element[0]));
          }
          if (this.options.fade) {
            return $tip.stop().css({
              opacity: 0,
              display: "block",
              visibility: "visible"
            }).animate({
              opacity: this.options.opacity
            });
          } else {
            return $tip.css({
              visibility: "visible",
              opacity: this.options.opacity
            });
          }
        }
      },
      hide: function() {
        if (this.options.fade) {
          return this.tip().stop().fadeOut(function() {
            return $(this).remove();
          });
        } else {
          return this.tip().remove();
        }
      },
      fixTitle: function() {
        var $e;
        $e = this.$element;
        if ($e.attr("title") || typeof ($e.attr("original-title")) !== "string") {
          return $e.attr("original-title", $e.attr("title") || "").removeAttr("title");
        }
      },
      getTitle: function() {
        var $e, o, title;
        title = void 0;
        $e = this.$element;
        o = this.options;
        this.fixTitle();
        title = void 0;
        o = this.options;
        if (typeof o.title === "string") {
          title = $e.attr((o.title === "title" ? "original-title" : o.title));
        } else {
          if (typeof o.title === "function") {
            title = o.title.call($e[0]);
          }
        }
        title = ("" + title).replace(/(^\s*|\s*$)/, "");
        return title || o.fallback;
      },
      tip: function() {
        if (!this.$tip) {
          this.$tip = $("<div class=\"tipsy\"></div>").html("<div class=\"tipsy-arrow\"></div><div class=\"tipsy-inner\"></div>");
          this.$tip.data("tipsy-pointee", this.$element[0]);
        }
        return this.$tip;
      },
      validate: function() {
        if (!this.$element[0].parentNode) {
          this.hide();
          this.$element = null;
          return this.options = null;
        }
      },
      enable: function() {
        return this.enabled = true;
      },
      disable: function() {
        return this.enabled = false;
      },
      toggleEnabled: function() {
        return this.enabled = !this.enabled;
      }
    };
    $.fn.tipsy = function(options) {
      var binder, enter, eventIn, eventOut, get, leave, tipsy;
      get = function(ele) {
        var tipsy;
        tipsy = $.data(ele, "tipsy");
        if (!tipsy) {
          tipsy = new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
          $.data(ele, "tipsy", tipsy);
        }
        return tipsy;
      };
      enter = function() {
        var tipsy;
        tipsy = get(this);
        tipsy.hoverState = "in";
        if (options.delayIn === 0) {
          return tipsy.show();
        } else {
          tipsy.fixTitle();
          return setTimeout((function() {
            if (tipsy.hoverState === "in") {
              return tipsy.show();
            }
          }), options.delayIn);
        }
      };
      leave = function() {
        var tipsy;
        tipsy = get(this);
        tipsy.hoverState = "out";
        if (options.delayOut === 0) {
          return tipsy.hide();
        } else {
          return setTimeout((function() {
            if (tipsy.hoverState === "out") {
              return tipsy.hide();
            }
          }), options.delayOut);
        }
      };
      if (options === true) {
        return this.data("tipsy");
      } else if (typeof options === "string") {
        tipsy = this.data("tipsy");
        if (tipsy) {
          tipsy[options]();
        }
        return this;
      }
      options = $.extend({}, $.fn.tipsy.defaults, options);
      if (!options.live) {
        this.each(function() {
          return get(this);
        });
      }
      if (options.trigger !== "manual") {
        binder = (options.live ? "live" : "bind");
        eventIn = (options.trigger === "hover" ? "mouseenter" : "focus");
        eventOut = (options.trigger === "hover" ? "mouseleave" : "blur");
        this[binder](eventIn, enter)[binder](eventOut, leave);
      }
      return this;
    };
    $.fn.tipsy.defaults = {
      className: null,
      delayIn: 0,
      delayOut: 0,
      fade: false,
      fallback: "",
      gravity: "n",
      html: false,
      live: false,
      offset: 0,
      opacity: 0.8,
      title: "title",
      trigger: "hover"
    };
    $.fn.tipsy.revalidate = function() {
      return $(".tipsy").each(function() {
        var pointee;
        pointee = $.data(this, "tipsy-pointee");
        if (!pointee || !isElementInDOM(pointee)) {
          return $(this).remove();
        }
      });
    };
    $.fn.tipsy.elementOptions = function(ele, options) {
      if ($.metadata) {
        return $.extend({}, options, $(ele).metadata());
      } else {
        return options;
      }
    };
    $.fn.tipsy.autoNS = function() {
      if ($(this).offset().top > ($(document).scrollTop() + $(window).height() / 2)) {
        return "s";
      } else {
        return "n";
      }
    };
    $.fn.tipsy.autoWE = function() {
      if ($(this).offset().left > ($(document).scrollLeft() + $(window).width() / 2)) {
        return "e";
      } else {
        return "w";
      }
    };
    return $.fn.tipsy.autoBounds = function(margin, prefer) {
      return function() {
        var $this, boundLeft, boundTop, dir;
        dir = {
          ns: prefer[0],
          ew: (prefer.length > 1 ? prefer[1] : false)
        };
        boundTop = $(document).scrollTop() + margin;
        boundLeft = $(document).scrollLeft() + margin;
        $this = $(this);
        if ($this.offset().top < boundTop) {
          dir.ns = "n";
        }
        if ($this.offset().left < boundLeft) {
          dir.ew = "w";
        }
        if ($(window).width() + $(document).scrollLeft() - $this.offset().left < margin) {
          dir.ew = "e";
        }
        if ($(window).height() + $(document).scrollTop() - $this.offset().top < margin) {
          dir.ns = "s";
        }
        return dir.ns + (dir.ew ? dir.ew : "");
      };
    };
  })(jQuery);

  (function($) {
    return $.fn.listenForChange = function(options) {
      var current_focus, jquery_object, settings;
      settings = $.extend({
        interval: 200
      }, options);
      jquery_object = this;
      current_focus = null;
      jquery_object.filter(":input").add(":input", jquery_object).focus(function() {
        return current_focus = this;
      }).blur(function() {
        return current_focus = null;
      });
      setInterval((function() {
        return jquery_object.filter(":input").add(":input", jquery_object).each(function() {
          if ($(this).data("change_listener") === undefined) {
            $(this).data("change_listener", $(this).val());
            return;
          }
          if ($(this).data("change_listener") === $(this).val()) {
            return;
          }
          $(this).trigger("change");
          $(this).trigger("keyup");
          return $(this).data("change_listener", $(this).val());
        });
      }), settings.interval);
      return this;
    };
  })(jQuery);

  window.nameinput = {
    maxlength: 35,
    lettersonly: true,
    regex: /^[a-zA-Z0-9 ]+$/,
    notblank: true
  };

  window.emailinput = {
    malength: 35,
    regex: /^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/
  };

  window.isblank = function(str) {
    if (str.length === 0) {
      return true;
    } else {
      return false;
    }
  };

  window.tooLong = function(string, maxlength) {
    if (string.length <= maxlength) {
      return false;
    } else {
      return true;
    }
  };

  window.tooShort = function(string, minlength) {
    if (string.length >= minlength) {
      return false;
    } else {
      return true;
    }
  };

  window.validateText = function(text, min, max) {
    var increment, totalitems, validitems;
    validitems = 0;
    totalitems = 4;
    if (min == null) {
      min = 3;
    }
    if (max == null) {
      max = 35;
    }
    increment = function() {
      return validitems++;
    };
    if (!isblank(text)) {
      increment();
    }
    if (!tooShort(text, min)) {
      increment();
    }
    if (!tooLong(text, max)) {
      increment();
    }
    if (nameinput.regex.test(text)) {
      increment();
    }
    if (validitems < totalitems) {
      return false;
    } else {
      return true;
    }
  };

  window.validateEmail = function(email) {
    var increment, totalitems, validitems;
    validitems = 0;
    totalitems = 1;
    increment = function() {
      return validitems++;
    };
    if (emailinput.regex.test(email)) {
      increment();
    }
    if (validitems < totalitems) {
      return false;
    } else {
      return true;
    }
  };

  window.isPhone = function(input) {
    var regex;
    regex = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})\s*[-. ]?\s*([0-9]{4})$/;
    return regex.test(input);
  };

  window.is_int = function(value) {
    if (parseFloat(value) === parseInt(value) && !isNaN(value)) {
      return true;
    } else {
      return false;
    }
  };

  $ = jQuery;

  $.fn.extend({
    multistep: function(options) {
      var currentStep, form, log, settings, specialClasses, step;
      settings = {
        debug: true,
        progressbar: true
      };
      settings = $.extend(settings, options);
      log = function(msg) {
        if (settings.debug) {
          return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
        }
      };
      this.addClass('multistep-form');
      $('input[type=text],input[type=email],textarea', this).each(function() {
        return $(this).listenForChange();
      });
      this.find('.step').first().css('display', 'block');
      this.find('.step:not(:first)').append('<a href="#" class="back"></a>');
      window.valid = false;
      form = this;
      step = $('.step', this);
      currentStep = 0;
      specialClasses = ["phone", "zip", "email"];
      window.specialRegEx = new RegExp(specialClasses.join("|"));
      $("input:not([type=image],[type=button],[type=submit],[type=radio],[type=checkbox])", form).keyup(function() {
        var min, skip, _ref;
        min = (_ref = ($(this)).attr('min')) != null ? _ref : 3;
        if ((($(this)).attr('class') != null) && ((($(this)).attr('class')).match(specialRegEx) != null)) {
          skip = true;
        }
        if (!(($(this)).attr('optional') === "yes" || ($(this)).val().length < min || (skip != null))) {
          if (validateText($(this).val(), min, $(this).attr('max'))) {
            return $(this).removeClass('error').addClass('success').attr('valid', 'true');
          } else {
            return $(this).removeClass('success').addClass('error').attr('valid', 'false');
          }
        }
      });
      ($('input.phone', form)).change(function() {
        if (isPhone($(this).val())) {
          return $(this).removeClass('error').addClass('success').attr('valid', 'true');
        } else {
          return $(this).removeClass('success').addClass('error').attr('valid', 'false');
        }
      });
      ($('input.email', form)).change(function() {
        if (validateEmail($(this).val())) {
          $(this).removeClass('error').addClass('success').attr('valid', 'true');
        } else {
          $(this).removeClass('success').addClass('error').attr('valid', 'false');
        }
        if ($(this).val() != null) {
          return $(this).addClass('success');
        } else {
          return $(this).addClass('error');
        }
      });
      ($('input.zip', form)).change(function() {
        if (is_int($(this).val()) && $(this).val().length === 5) {
          return $(this).removeClass('error').addClass('success').attr('valid', 'true');
        } else {
          return $(this).removeClass('success').addClass('error').attr('valid', 'false');
        }
      });
      ($('input[type=radio]', form)).change(function() {
        var name;
        name = $(this).attr('name');
        if ($('input[name=' + name + ']').is(':checked')) {
          return $('input[name=' + name + ']').first().tipsy("hide");
        }
      });
      ($('input[type=checkbox]', form)).change(function(e) {
        var inputName, max, min;
        min = 1;
        max = 9999;
        inputName = $(this).prop('name').replace(/\[/, "\\[");
        inputName = inputName.replace(/\]/, "\\]");
        if ($('input[name=' + inputName + ']').first().attr('min') != null) {
          min = $('input[name=' + inputName + ']').first().attr('min').match(/\d+/);
        }
        if ($('input[name=' + inputName + ']').first().attr('max') != null) {
          max = $('input[name=' + inputName + ']').first().attr('max').match(/\d+/);
        }
        if ($('input[name=' + inputName + ']').is(':checked') && $('input[name=' + inputName + ']:checked').length <= max && $('input[name=' + inputName + ']:checked').length >= min) {
          $('input[name=' + inputName + ']').first().tipsy("hide");
          return $('input[name=' + inputName + ']').first().tipsy("hide");
        } else {
          $('.error-text.checkbox').remove();
          return $('input[name=' + inputName + ']').first().attr('original-title', 'Select at least ' + min + ' boxes!').tipsy("show");
        }
      });
      ($('select', form)).change(function() {
        if (($(this).val() != null) && ($(this)).val() !== '') {
          return $(this).removeClass('error');
        } else {
          return $(this).addClass('error');
        }
      });
      ($('textarea', form)).keyup(function() {
        if (($(this).val() != null) && ($(this)).val() !== '') {
          return $(this).removeClass('error').addClass('success').attr('valid', 'true');
        } else {
          return $(this).removeClass('success').addClass('error').attr('valid', 'false');
        }
      });
      return $('.step .submit', form).click(function(e) {
        var progress, thisStep;
        thisStep = $(this).closest('.step');
        e.preventDefault();
        window.totalitems = 0;
        window.validitems = 0;
        $('input:not([type=image],[type=button],[type=submit],[type=radio],[type=checkbox]):visible', thisStep).each(function() {
          window.totalitems++;
          if ($(this).attr('valid') === 'true' || ($(this)).attr('optional') === "yes") {
            window.validitems++;
          } else {
            $(this).removeClass('success').addClass('error').focus();
            false;
          }
          return log(validitems + " " + totalitems);
        });
        ($('textarea:visible', thisStep)).each(function() {
          window.totalitems++;
          if ($(this).attr('valid') === 'true' || ($(this)).attr('optional') === "yes") {
            return window.validitems++;
          } else {
            $(this).removeClass('success').addClass('error').focus();
            return false;
          }
        });
        $('select:visible', thisStep).each(function() {
          window.totalitems++;
          if (($(this).val() != null) && $(this).val() !== "") {
            window.validitems++;
            return $(this).removeClass('error');
          } else {
            return $(this).addClass('error');
          }
        });
        $('input[type=radio]:visible', thisStep).each(function() {
          var name;
          name = $(this).attr('name');
          window.totalitems++;
          if ($('input[name=' + name + ']').is(':checked') || $('input[name=' + name + ']:hidden').length || $('input[name=' + name + '][optional=yes]').length) {
            return window.validitems++;
          } else {
            $('input[name=' + name + ']').first().attr('original-title', 'Select One!');
            $('input[name=' + name + ']').first().tipsy({
              trigger: 'manual',
              gravity: 'e'
            });
            return $('input[name=' + name + ']').first().tipsy("show");
          }
        });
        $('input[type=checkbox]:visible', thisStep).each(function() {
          var inputName, max, min, name;
          window.totalitems++;
          min = 0;
          max = 9999;
          inputName = $(this).prop('name').replace(/\[/, "\\[");
          inputName = inputName.replace(/\]/, "\\]");
          if ($('input[name=' + inputName + ']').first().attr('min') != null) {
            min = $('input[name=' + inputName + ']').first().attr('min').match(/\d+/);
          }
          if ($('input[name=' + inputName + ']').first().attr('max') != null) {
            max = $('input[name=' + inputName + ']').first().attr('max').match(/\d+/);
          }
          name = $(this).attr('name');
          if ($('input[name=' + inputName + ']').is(':checked') && $('input[name=' + inputName + ']:checked').length <= max && $('input[name=' + inputName + ']:checked').length >= min) {
            $('input[name=' + inputName + ']').first().tipsy("hide");
            return window.validitems++;
          } else {
            return $('input[name=' + inputName + ']').first().attr('original-title', 'Select at least ' + min + ' boxes!').tipsy("show");
          }
        });
        if (window.totalitems === window.validitems) {
          if (thisStep.attr('id') !== "last-step") {
            thisStep.slideUp();
            thisStep.next('.step').slideDown();
            currentStep++;
            progress = currentStep / ($('.step', form)).size();
            $('.progress').css('width', progress * 100 + "%");
          } else {
            if ((options != null ? options.beforeSubmit : void 0) != null) {
              options.beforeSubmit();
            }
            form.submit();
          }
        }
        return $('.back', form).click(function(e) {
          e.preventDefault();
          log('clicked');
          ($(this)).closest('.step').slideUp();
          ($(this)).closest('.step').prev('.step').slideDown();
          currentStep--;
          progress = currentStep / ($('.step', form)).size();
          return $('.progress').css('width', progress * 100 + "%");
        });
      });
    }
  });

  $(function() {
    $('input:not([type=button],[type=image],[type=submit],[type=radio],[type=checkbox]),select').each(function() {
      return $(this).tipsy({
        trigger: 'manual',
        gravity: 'w',
        fallback: 'fix this field!'
      });
    });
    return $('input[type=checkbox]').each(function() {
      return $(this).tipsy({
        trigger: 'manual',
        gravity: 'se',
        fallback: 'Select one!'
      });
    });
  });

}).call(this);
